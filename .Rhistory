install.packages("devtools")
install.packages ("devtools")
library(devtools)
find_rtools()
<html>
<html>
summary(cars)
install.packages("swirl")
library("swirl")
swirl()
find_rtools()
find_rtools()
1 + 1
"it is time to go home"
install.packages("swirl")
library("swirl")
swirl()
x <- data.frame (foo = 1:4, bar = c(T, T, F, F))
x
nrow(x)
ncol(x)
x <- data.frame (foo = 1:4, bar = c(T, T, F, F), test (5:8))
x <- data.frame (foo = 1:4, bar = c(T, T, F, F), test = 5:8)
x
ncol(x)
run ?read.table()
swirl()
swirl()
library("swirl")
swirl()
1:20
pi:10
15:1
`:`
`:`
?`:`
seq(1,20)
seq (0, 10, by = 0.5)
my_seq <- seq (5, 10, length=30)
length ("my_seq")
length (my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep ( c(0,1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste (my_char, collapse = " ")
my_name <- c(my_char, "kmleong")
my_name
paste (my_name, collapse = " ")
paste ("Hello", "world!", sep = " ")
paste (c("1", "2" "3"), sep = "")
paste (c("1", "2" "3"), sep = ""))
paste (c("1", "2" "3"), sep = "")
paste (c("1", "2", "3"), sep = "")
paste (1:3, c("X", "Y", "Z"), sep = "")
paste (LETTERS, 1:4, sep = "-")
library (swirl)
swirl()
x <- c(44, NA, 5, NA)
x^3
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample (c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na) + sum(my_data)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y [y >0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2. -10)]
x[c(-2, -10)]
x[c(2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names (vect)
vect2
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical ("vect" == "vect2")
identical (vect) == identical (vect2)
y <- identical (vect)
identical (vect)
identical (vect) == identical (vect2)
identical c[vect == vect2]
identical (c[vect == vect2])
identical (vect, vect2)
vect ["bar"]
vect [c("foo", "bar")]
my_vector (1:20)
my_vector <- (1:20)
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical (my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
My_data <- data.frame(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class (my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
library (datasets)
data(iris)
?iris
iris (Sepal.length)
iris3
library (swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE)
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !==7
5 == 7
5 != 7
5 !== 7
5 != 7
5 not equal 7
5 != 7
!(5 == 7)
false & false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && C(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | C(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE (6 > 4)
identical ('twins', 'twins')
xor (5 == 6, !FALSE)
ints <-sample (10)
ints
ints > 5
which (ints)
which (ints > 7)
any (ints < 0)
all (ints > 0)
q
q
library (swirl)
swirl ()
x <- matrix (1:8, 2, 4)
apply (x, 2, mean)
apply (x, 1, mean)
apply (x, 2, min)
apply (x, 1, function(x) x/2)
x
apply (x, 2, function(x) x/2)
x <- list (a=1:5, b=6:10)
lapply (x,mean)
apply (x, 2, mean)
lapply (x,mean)
?mean
x <- list (a=matrix(1;4, 2,2), b=matrix(1:6, 3, 2))
x <- list (a=matrix(1:4, 2,2), b=matrix(1:6, 3, 2))
lapply (x, function(x), x[,1]/2)
lapply (x, function(x) x[,1]/2)
x
x <- list (a=1:5, b=6:10)
lapply (x,mean)
sapply(x, mean)
class(lapply (x, mean))
class (sapply(x, mean))
x <- matrix (1:8, 2, 4)
lapply (x, mean)
class (lapply (x, mean))
name<-c("ting","ting","ting","chong","chong","chong")
subject<-c("IT","CS","AI","IT","CS","AI")
marks<-c(90,95,80,90,99,85)
dt<-data.frame(name,subject,marks)
dt
tapply (dt$marks, dt$name, sum)
tapply (dt$marks, mean)
tapply (dt$marks, dt$name, mean)
tapply (dt$marks, dt$subject, mean)
?tapply
split (dt, dt$name)
split (dt, dt$subject)
split (dt, dt$marks)
s1 <- split(dt, dt$name)
sl$'ting'
s1$'ting'
s1$'ting1'
library (datasets)
data(iris)
?iris
rowMeans (iris[, 1:4])
colmeans (iris[, 1:4])
colMeans (iris[, 1:4])
apply (iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library (datasets)
datamtcars
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, mean)
x <- sample (10)
x
x <- rnorm(10)
x
summary(x)
x <- rnorm(1000)
summary(x)
x
summary(x)
?rnorm
sample(10)
sample(10)
sample(10)
set.seed(1)
sample(10)
sample(10)
set.seed(2)
sample(10)
sample(10)
set.seed(2)
x <- rep (0:2, each = 3)
e <- rnorm (9, 0, 20)
y <- 0.5 +2 * x + e
y
library (datasets)
Rprof()
fit <- lm(y ~ x + e)
Rprof(NULL)
summaryRprof()
library (swirl)
swirl()
1
library (swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
(flags$orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
heads()
heads(flag_colors)
head(flag_colors)
lapply (flag_colors, sum)
sapply(flag_colors, sum)
sapply (flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply (flags, unique)
unique_vals
sapply (unique_vals, length)
sapply (flags, unique)
lapply (unique_vals, function(elem) elem[2])
1
0
0
library(swirl)
swirl()
sapply(flags, unique)
vapply (flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply (flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
swirl()
source('cachematrix.R')
setwd("~/GitHub/ProgrammingAssignment2")
source('cachematrix.R')
m <- makeCacheMatrix(matrix(c(2, 3, 0, 2), c(2, 2)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(2, 3, 0, 2), c(2, 2)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(20, 3, 3, 20), c(2, 2)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(2, 3, 3, 2), c(2, 2)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(4, 0, 0, 4), c(2, 2)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(4, 2, 2, 4), c(2, 2)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(8, 0, 0, 8), c(2, 2)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(8, 0, 0, 10), c(2, 2)))
cachesolve(m)
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(80, 0, 0, 10), c(2, 2)))
cacheSolve(m
)
m <- makeCacheMatrix(matrix(c(2, 0, 0, 10), c(2, 2)))
cacheSolve(m)
